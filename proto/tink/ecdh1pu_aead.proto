/*
Copyright Google Inc., SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

// Definitions for Elliptic Curve Diffie-Hellman - One-Pass Unified Model (ECDH-1PU).
syntax = "proto3";

package google.crypto.tink;
import "proto/common.proto";
import "proto/tink.proto";
import "proto/common_composite.proto";

option java_package = "com.google.crypto.tink.proto";
option java_multiple_files = true;
option objc_class_prefix = "TINKPB";
option go_package = "github.com/hyperledger/aries-framework-go/crypto/tinkcrypto/primitive/proto/ecdh1pu_aead_go_proto";

// Protos for keys for ECDH-1PU with One-Step KDF key wrapping and AEAD encryption.
//
//
// ECDH-1PU-keys represent 1PUEncryption and 1PUDecryption primitives.

// Parameters of KW (Key Wrapping)
message Ecdh1puKwParams {
  // Required.
  EllipticCurveType curve_type = 1;

  // Required.
  KeyType key_type = 2;

  // Not needed for key storage but required for primitive execution
  repeated ECPublicKey recipients = 3;

  // Not needed for key storage but required for primitive execution
  ECPublicKey sender = 4;
}

// Parameters of AEAD Content encryption.
message Ecdh1puAeadEncParams {
  // Required.
  KeyTemplate aead_enc = 1; // Contains e.g. AesGcmKeyFormat.
}

message Ecdh1puAeadParams {
  // Key Wrapping.
  // Required.
  Ecdh1puKwParams kw_params = 1;

  // Content Encryption.
  // Required.
  Ecdh1puAeadEncParams enc_params = 2;

  // EC point format.
  // Required.
  EcPointFormat ec_point_format = 3;
}

// Ecdh1puAeadPublicKey represents ECDH1PUEncrypt primitive.
// key_type: type.hyperledger.org/hyperledger.aries.crypto.tink.Ecdh1puAeadPublicKey
message Ecdh1puAeadPublicKey {
  // Required.
  uint32 version = 1;

  // Required.
  Ecdh1puAeadParams params = 2;

  // Required.
  string KID = 3;

  // Affine coordinates of the public key in bigendian representation.
  // The public key is a point (x, y) on the curve defined by params.kw_params.curve.
  // Required.
  bytes x = 4;
  // Required.
  bytes y = 5;
  // Not needed for key storage but required for primitive execution.
  bytes KWD = 6;
}

// Ecdh1puAeadPrivateKey represents ECDH1PUDecrypt primitive.
// key_type: type.hyperledger.org/hyperledger.aries.crypto.tink.Ecdh1puAeadPrivateKey
message Ecdh1puAeadPrivateKey {
  // Required.
  uint32 version = 1;

  // Required.
  Ecdh1puAeadPublicKey public_key = 2;

  // Required.
  bytes key_value = 3; // Big integer in bigendian representation.
}

message Ecdh1puAeadKeyFormat {
  // Required.
  Ecdh1puAeadParams params = 1;
}