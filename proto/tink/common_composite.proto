/*
Copyright Google Inc., SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

// Definitions for common Elliptic Curve Diffie-Hellman (ECDH) primitives.
syntax = "proto3";

package google.crypto.tink;
import "proto/common.proto";

option java_package = "com.google.crypto.tink.proto";
option java_multiple_files = true;
option objc_class_prefix = "TINKPB";
option go_package = "github.com/hyperledger/aries-framework-go/crypto/tinkcrypto/primitive/proto/common_composite_proto";

// KeyType, EC or OKP
enum KeyType {
    UNKNOWN_KEY_TYPE = 0;
    EC = 1;
    OKP = 2;
}

// ECPublicKey represents a  EC Public key provided to the key template for primitive execution.
// It could be a recipient key (for encryption) or sender key (for ECDH-1PU decryption)
message ECPublicKey {
    // Required.
    uint32 version = 1;
    // Required.
    EllipticCurveType curve_type = 2;
    // Required.
    KeyType key_type = 3;

    // Required.
    string KID = 4;

    // Affine coordinates of the public key in bigendian representation.
    // The public key is a point (x, y) on the curve defined by params.kw_params.curve.
    // Required.
    bytes x = 5;
    // Required.
    bytes y = 6;
}